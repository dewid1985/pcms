<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2015-01-15 10:16:42                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/
class PlatformCommonRubricDAO extends AutoPlatformCommonRubricDAO
{

    /**
     * Сиквенц
     *
     * @return string
     */
    public function getSequence()
    {
        return parent::getSequence() . '_seq';
    }

    /**
     * Получение по id
     *
     * @param $id
     * @param int $expires
     * @return  PlatformCommonRubric
     */
    public function getById($id, $expires = Cache::EXPIRES_MEDIUM)
    {
        return parent::getById($id, $expires);
    }

    public function getListRubricsByProject(PlatformCommonProject $project)
    {
        $criteria = Criteria::create($this)
            ->setSilent(FALSE)
            ->add(LTreeExpression::descendant('path', ucfirst($project->getName())))
            ->addOrder(OrderBy::create('path')->asc());

        return $criteria->getList();
    }

    /**
     * Получение по $name
     *
     * @param $name
     * @return PlatformCommonRubric
     */
    public function getByName($name)
    {
        return Criteria::create($this)
            ->setSilent(FALSE)
            ->add(
                Expression::eq(
                    DBField::create('name'),
                    DBValue::create($name)
                )
            )
            ->get();
    }

    /**
     * Получить по $shortName и по обьету PlatformCommonProject
     *
     * @param $shortName
     * @param PlatformCommonProject $project
     * @return PlatformCommonRubric
     */
    public function getByShortNameAndProject($shortName, PlatformCommonProject $project)
    {
        $criteria = Criteria::create($this)
            ->setSilent(TRUE)
            ->add(Expression::eq(DBField::create('project_id', $this->getTable()), $project))
            ->add(Expression::eq("name", $shortName));

        return $criteria->get();
    }

    /**
     * Поиск по заполненному реквесту ModuleRubricsSearchOperationRequest
     *
     * @param ModuleRubricsSearchOperationRequest $request
     * @return array
     */
    public function getBySearchOperationRequest(ModuleRubricsSearchOperationRequest $request)
    {
        $criteria = Criteria::create($this)
            ->setSilent(FALSE)
            ->addProjection(
                Projection::chain()
                    ->add(Projection::property(PlatformDialectString::create('count("common"."rubric"."id") OVER ()')))
                    ->add(Projection::property("id"))
                    ->add(Projection::property("path"))
                    ->add(Projection::property("rubricData.shortName"))
                    ->add(Projection::property("rubricData.description"))
                    ->add(Projection::property(PlatformDialectString::create(
                        'to_char("common"."rubric"."created_at"::timestamptz ,\'YYYY-MM-DD HH24:MI\') as "created_at"'
                    )))
                    ->add(Projection::property(PlatformDialectString::create(
                        'to_char("common"."rubric"."modified_at"::timestamptz ,\'YYYY-MM-DD HH24:MI\') as "modified_at"'
                    )))
            )
            ->addOrder(OrderBy::create('path')->asc())
            ->setLimit($request->getLimit())
            ->setOffset($request->getOffset());

        $textSearchBlock = Expression::orBlock();

        if (!is_null($request->getShortName()))
            $textSearchBlock->expOr(
                Expression::fullTextOr(
                    dechex(crc32(PlatformCommonRubricData::dao()->getTable())) . '_rubric_data_id.short_name',
                    array_map(
                        function ($parse) {
                            return trim($parse);
                        }, explode(',', $request->getShortName())
                    )
                )
            );

        if (!is_null($request->getDescription()))
            $textSearchBlock->expOr(
                Expression::fullTextOr(
                    dechex(crc32(PlatformCommonRubricData::dao()->getTable())) . '_rubric_data_id.description',
                    array_map(
                        function ($parse) {
                            return trim($parse);
                        }, explode(',', $request->getDescription())
                    )
                )
            );

        if ($textSearchBlock->getSize() != 0)
            $criteria
                ->add($textSearchBlock);


        if ($request->getOfCreatedAt() && $request->getToCreatedAt())
            $criteria
                ->add(
                    Expression::gt('createdAt', $request->getOfCreatedAt())
                )
                ->add(
                    Expression::lt('createdAt', $request->getToCreatedAt())
                );

        if (is_null($request->getOfCreatedAt()) && $request->getToCreatedAt())
            $criteria->add(
                Expression::lt('createdAt', $request->getToCreatedAt())
            );

        if ($request->getOfCreatedAt() && is_null($request->getToCreatedAt()))
            $criteria->add(
                Expression::gt('createdAt', $request->getOfCreatedAt())
            );


        if ($request->getOfModifiedAt() && $request->getToModifiedAt())
            $criteria
                ->add(
                    Expression::gt('modifiedAt', $request->getOfModifiedAt())
                )
                ->add(
                    Expression::lt('modifiedAt', $request->getToModifiedAt())
                );

        if (is_null($request->getOfModifiedAt()) && $request->getToModifiedAt())
            $criteria->add(
                Expression::lt('modifiedAt', $request->getToModifiedAt())
            );

        if ($request->getOfModifiedAt() && is_null($request->getToModifiedAt()))
            $criteria->add(
                Expression::gt('modifiedAt', $request->getOfModifiedAt())
            );

        return $criteria->getCustomList();
    }

    /**
     * Получить по родителю $path
     *
     * @param $path
     * @return PlatformCommonRubric
     */
    public function getByPath($path)
    {
        return Criteria::create($this)
            ->setSilent(TRUE)
            ->add(Expression::eq('path', $path))
            ->get();
    }

    /**
     * @param $path
     * @param $projectId
     * @return array
     */
    public function getDescendantsByPathAndProjectId($path, $projectId)
    {
        $criteria = Criteria::create($this)
            ->setSilent(FALSE)
            ->add(LTreeExpression::descendant('path', $path))
            ->add(Expression::eq('project', $projectId))
            ->addOrder(OrderBy::create('path')->asc());

        return $criteria->getList();
    }
}

?>