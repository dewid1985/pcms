<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2015-02-09 10:42:04                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class PlatformCommonNewsDAO extends AutoPlatformCommonNewsDAO
	{
		protected $array = array();

		/**
		 * Получение по id
		 *
		 * @param $id
		 * @param int $expires
		 * @return  PlatformCommonNews
		 */
		public function getById($id, $expires = Cache::EXPIRES_MEDIUM)
		{
			return parent::getById($id, $expires);
		}

		/**
		 * @return string
		 */
		public function getSequence()
		{
			return parent::getSequence() . '_seq';
		}

		/**
		 * Получение по проекту и новсти
		 *
		 * @param $newsId
		 * @param $projectId
		 * @return PlatformCommonNews
		 */
		public function getByNewsAndProject($newsId, $projectId)
		{
			return Criteria::create($this)
				->add(Expression::eq(DBField::create('id'), DBValue::create($newsId)))
				->add(Expression::eq(DBField::create('project_id'), DBValue::create($projectId)))
				->get();
		}


		/**
		 * Поиск по реквесту
		 *
		 * @param ModuleNewsSearchOperationRequest $request
		 * @return array
		 */
		public function getBySearchOperationRequest(ModuleNewsSearchOperationRequest $request)
		{
			$criteria =
				Criteria::create($this)
					->setSilent(FALSE)
					->addProjection(
						Projection::group('id')
					)
					->addProjection(
						Projection::group('newsDraft.title')
					)
					->addProjection(
						Projection::group('newsDraft.modifiedAt')
					)
					->addProjection(
						Projection::property(
							PlatformDialectString::create('count("common"."news"."id") OVER ()')
						)
					)
					->addProjection(
						Projection::property('id')
					)
					->addProjection(
						Projection::property('newsDraft.title')
					)
					->addProjection(
						Projection::property(
							PlatformDialectString::create(
								'to_char("common"."news"."created_at"::timestamptz ,\'YYYY-MM-DD HH24:MI\') as "created_at"'
							)
						)
					)
					->addProjection(
						Projection::property(
							PlatformDialectString::create(
								'to_char("'.dechex(crc32(PlatformCommonNewsDraft::dao()->getTable()))
								. '_news_draft_id'.'"."modified_at"::timestamptz ,\'YYYY-MM-DD HH24:MI\') as "modified_at"'
							)
						)
					)
					->addProjection(
						Projection::property(
							PlatformDialectString::create(
								'to_char("common"."news"."published_at"::timestamptz ,\'YYYY-MM-DD HH24:MI\') as "published_at"'
							)
						)
					);


			$textSearchBlock = Expression::orBlock();

			if (!is_null($request->getTitle()))
				$textSearchBlock->expOr(
					Expression::fullTextOr(
						dechex(crc32(PlatformCommonNewsDraft::dao()->getTable())) . '_news_draft_id.title',
						array_map(
							function ($parse) {
								return trim($parse);
							}, explode(',', $request->getTitle())
						)
					)
				);

			if (!is_null($request->getAnons()))
				$textSearchBlock->expOr(
					Expression::fullTextOr(
						dechex(crc32(PlatformCommonNewsDraft::dao()->getTable())) . '_news_draft_id.anons',
						array_map(
							function ($parse) {
								return trim($parse);
							}, explode(',', $request->getAnons())
						)
					)
				);

			if (!is_null($request->getText()))
				$textSearchBlock->expOr(
					Expression::fullTextOr(
						dechex(crc32(PlatformCommonNewsDraft::dao()->getTable())) . '_news_draft_id.text',
						array_map(
							function ($parse) {
								return trim($parse);
							}, explode(',', $request->getText())
						)
					)
				);

			if ($textSearchBlock->getSize() != 0)
				$criteria
					->add($textSearchBlock);


			if ($request->getOfCreatedAt() && $request->getToCreatedAt())
				$criteria
					->add(
						Expression::gt('createdAt', $request->getOfCreatedAt())
					)
					->add(
						Expression::lt('createdAt', $request->getToCreatedAt())
					);

			if (is_null($request->getOfCreatedAt()) && $request->getToCreatedAt())
				$criteria->add(
					Expression::lt('createdAt', $request->getToCreatedAt())
				);

			if ($request->getOfCreatedAt() && is_null($request->getToCreatedAt()))
				$criteria->add(
					Expression::gt('createdAt', $request->getOfCreatedAt())
				);


			if ($request->getOfPublishedAt() && $request->getToPublishedAt())
				$criteria
					->add(
						Expression::gt('publishedAt', $request->getOfPublishedAt())
					)
					->add(
						Expression::lt('publishedAt', $request->getToPublishedAt())
					);

			if (is_null($request->getOfPublishedAt()) && $request->getToPublishedAt())
				$criteria->add(
					Expression::lt('publishedAt', $request->getToPublishedAt())
				);

			if ($request->getOfPublishedAt() && is_null($request->getToPublishedAt()))

				$criteria->add(
					Expression::gt('publishedAt', $request->getOfPublishedAt())
				);

			if ($request->getOfModifiedAt() && $request->getToModifiedAt())
				$criteria
					->add(
						Expression::gt('newsDraft.modifiedAt', $request->getOfModifiedAt())
					)
					->add(
						Expression::lt('newsDraft.modifiedAt', $request->getToModifiedAt())
					);

			if (is_null($request->getOfModifiedAt()) && $request->getToModifiedAt())
				$criteria->add(
					Expression::lt('newsDraft.modifiedAt', $request->getToModifiedAt())
				);

			if ($request->getOfModifiedAt() && is_null($request->getToModifiedAt()))
				$criteria->add(
					Expression::gt('newsDraft.modifiedAt', $request->getOfModifiedAt())
				);


			$criteria
				->add(Expression::eq(DBField::create('project_id'), DBValue::create($request->getProjectId())))
				->addOrder(OrderBy::create('id')->desc())
				->setLimit($request->getLimit())
				->setOffset($request->getOffset());

			return $criteria
				->getCustomList();
		}
	}
?>