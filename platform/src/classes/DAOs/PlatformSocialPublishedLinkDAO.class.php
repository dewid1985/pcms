<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2016-01-28 13:42:23                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/
class PlatformSocialPublishedLinkDAO extends AutoPlatformSocialPublishedLinkDAO
{
    public function getSequence()
    {
        return parent::getSequence().'_seq'; // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @param int $expires
     * @return PlatformSocialPublishedLink
     */
    public function getById($id, $expires = Cache::EXPIRES_MEDIUM)
    {
        return parent::getById($id, $expires); // TODO: Change the autogenerated stub
    }

    /**
     * @param null $limit
     * @return PlatformSocialPublishedLink[]
     * @throws ObjectNotFoundException
     */
    public function getNotPublished($limit = null)
    {
        $criteria = (new Criteria($this))
            ->setSilent(true)
            ->add(Expression::isFalse('published'));

        if(!is_null($limit))
        {
            $criteria->setLimit($limit);
        }

        $criteria->addOrder((new OrderBy('id'))->desc());

        return $criteria->getList();

    }

    public function getList($start, $limit){
        $criteria =
            (new Criteria($this))->setSilent(true);

        $criteria
            ->addProjection(new PropertyProjection(new PlatformDialectString('count(*) OVER ()')))
            ->addProjection(new PropertyProjection('id'))
            ->addProjection(new PropertyProjection('description'))
            ->addProjection(new PropertyProjection('linkUrl'))
            ->addProjection(new PropertyProjection('imgUrl'))
            ->addProjection(new PropertyProjection('published'))
            ->addProjection(new PropertyProjection('publishedAt'))
            ->addProjection(new PropertyProjection('createdAt'))
            ->addOrder((new OrderBy('id'))->desc())
            ->setOffset($start)
            ->setLimit($limit)


        ;

        return $criteria
            ->getCustomList();
    }
}

?>