<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-12-22 11:29:33                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoPlatformLogsAdminAuthLogs extends IdentifiableObject
	{
		protected $systemUser = false;
		protected $admin = null;
		protected $adminId = null;
		protected $entryAt = null;
		protected $login = null;
		protected $password = null;
		protected $ip = null;
		protected $captcha = null;
		protected $blockedIp = false;
		protected $dateBlockingIp = null;
		protected $blackList = null;
		protected $blackListId = null;
		protected $successful = null;
		protected $whiteIpList = null;
		protected $whiteIpListId = null;
		protected $adminCode = null;
		protected $adminCodeId = null;
		
		public function getSystemUser()
		{
			return $this->systemUser;
		}
		
		public function isSystemUser()
		{
			return $this->systemUser;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setSystemUser($systemUser = null)
		{
			Assert::isTernaryBase($systemUser);
			
			$this->systemUser = $systemUser;
			
			return $this;
		}
		
		/**
		 * @return PlatformUsersAdmin
		**/
		public function getAdmin()
		{
			if (!$this->admin && $this->adminId) {
				$this->admin = PlatformUsersAdmin::dao()->getById($this->adminId);
			}
			
			return $this->admin;
		}
		
		public function getAdminId()
		{
			return $this->admin
				? $this->admin->getId()
				: $this->adminId;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setAdmin(PlatformUsersAdmin $admin = null)
		{
			$this->admin = $admin;
			$this->adminId = $admin ? $admin->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setAdminId($id = null)
		{
			$this->admin = null;
			$this->adminId = $id;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function dropAdmin()
		{
			$this->admin = null;
			$this->adminId = null;
			
			return $this;
		}
		
		/**
		 * @return TimestampTZ
		**/
		public function getEntryAt()
		{
			return $this->entryAt;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setEntryAt(TimestampTZ $entryAt = null)
		{
			$this->entryAt = $entryAt;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function dropEntryAt()
		{
			$this->entryAt = null;
			
			return $this;
		}
		
		public function getLogin()
		{
			return $this->login;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setLogin($login)
		{
			$this->login = $login;
			
			return $this;
		}
		
		public function getPassword()
		{
			return $this->password;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setPassword($password)
		{
			$this->password = $password;
			
			return $this;
		}
		
		public function getIp()
		{
			return $this->ip;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setIp($ip)
		{
			$this->ip = $ip;
			
			return $this;
		}
		
		public function getCaptcha()
		{
			return $this->captcha;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setCaptcha($captcha)
		{
			$this->captcha = $captcha;
			
			return $this;
		}
		
		public function getBlockedIp()
		{
			return $this->blockedIp;
		}
		
		public function isBlockedIp()
		{
			return $this->blockedIp;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setBlockedIp($blockedIp = null)
		{
			Assert::isTernaryBase($blockedIp);
			
			$this->blockedIp = $blockedIp;
			
			return $this;
		}
		
		/**
		 * @return TimestampTZ
		**/
		public function getDateBlockingIp()
		{
			return $this->dateBlockingIp;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setDateBlockingIp(TimestampTZ $dateBlockingIp = null)
		{
			$this->dateBlockingIp = $dateBlockingIp;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function dropDateBlockingIp()
		{
			$this->dateBlockingIp = null;
			
			return $this;
		}
		
		/**
		 * @return PlatformUsersBlackIpList
		**/
		public function getBlackList()
		{
			if (!$this->blackList && $this->blackListId) {
				$this->blackList = PlatformUsersBlackIpList::dao()->getById($this->blackListId);
			}
			
			return $this->blackList;
		}
		
		public function getBlackListId()
		{
			return $this->blackList
				? $this->blackList->getId()
				: $this->blackListId;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setBlackList(PlatformUsersBlackIpList $blackList = null)
		{
			$this->blackList = $blackList;
			$this->blackListId = $blackList ? $blackList->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setBlackListId($id = null)
		{
			$this->blackList = null;
			$this->blackListId = $id;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function dropBlackList()
		{
			$this->blackList = null;
			$this->blackListId = null;
			
			return $this;
		}
		
		public function getSuccessful()
		{
			return $this->successful;
		}
		
		public function isSuccessful()
		{
			return $this->successful;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setSuccessful($successful = null)
		{
			Assert::isTernaryBase($successful);
			
			$this->successful = $successful;
			
			return $this;
		}
		
		/**
		 * @return PlatformUsersWhiteIpList
		**/
		public function getWhiteIpList()
		{
			if (!$this->whiteIpList && $this->whiteIpListId) {
				$this->whiteIpList = PlatformUsersWhiteIpList::dao()->getById($this->whiteIpListId);
			}
			
			return $this->whiteIpList;
		}
		
		public function getWhiteIpListId()
		{
			return $this->whiteIpList
				? $this->whiteIpList->getId()
				: $this->whiteIpListId;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setWhiteIpList(PlatformUsersWhiteIpList $whiteIpList = null)
		{
			$this->whiteIpList = $whiteIpList;
			$this->whiteIpListId = $whiteIpList ? $whiteIpList->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setWhiteIpListId($id = null)
		{
			$this->whiteIpList = null;
			$this->whiteIpListId = $id;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function dropWhiteIpList()
		{
			$this->whiteIpList = null;
			$this->whiteIpListId = null;
			
			return $this;
		}
		
		/**
		 * @return PlatformUsersAdminCode
		**/
		public function getAdminCode()
		{
			if (!$this->adminCode && $this->adminCodeId) {
				$this->adminCode = PlatformUsersAdminCode::dao()->getById($this->adminCodeId);
			}
			
			return $this->adminCode;
		}
		
		public function getAdminCodeId()
		{
			return $this->adminCode
				? $this->adminCode->getId()
				: $this->adminCodeId;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setAdminCode(PlatformUsersAdminCode $adminCode = null)
		{
			$this->adminCode = $adminCode;
			$this->adminCodeId = $adminCode ? $adminCode->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function setAdminCodeId($id = null)
		{
			$this->adminCode = null;
			$this->adminCodeId = $id;
			
			return $this;
		}
		
		/**
		 * @return PlatformLogsAdminAuthLogs
		**/
		public function dropAdminCode()
		{
			$this->adminCode = null;
			$this->adminCodeId = null;
			
			return $this;
		}
	}
?>