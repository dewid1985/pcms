<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2014-12-12 14:13:09                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/
class PlatformLogsAdminAuthLogs extends AutoPlatformLogsAdminAuthLogs implements Prototyped, DAOConnected
{
    /**
     * @return PlatformLogsAdminAuthLogs
     **/
    public static function create()
    {
        return new self;
    }

    /**
     * @return PlatformLogsAdminAuthLogsDAO
     **/
    public static function dao()
    {
        return Singleton::getInstance('PlatformLogsAdminAuthLogsDAO');
    }

    /**
     * @return ProtoPlatformLogsAdminAuthLogs
     **/
    public static function proto()
    {
        return Singleton::getInstance('ProtoPlatformLogsAdminAuthLogs');
    }

    // your brilliant stuff goes here

    public static function saveLog(PlatformLogsAdminAuthLogsRequest $request)
    {
        try {
            PlatformLogsAdminAuthLogs::dao()->add(
                PlatformLogsAdminAuthLogs::create()
                    ->setSystemUser($request->getSystemUser())
                    ->setAdminId($request->getAdminId())
                    ->setEntryAt($request->getEntryAt())
                    ->setLogin($request->getLogin())
                    ->setPassword($request->getPassword())
                    ->setIp($request->getIp())
                    ->setCaptcha($request->getCaptcha())
                    ->setBlockedIp($request->getDateBlockingIp())
                    ->setDateBlockingIp($request->getDateBlockingIp())
                    ->setBlockedIp($request->getBlockedIp())
                    ->setBlackListId($request->getBlackListId())
                    ->setSuccessful($request->getSuccessful())
                    ->setWhiteIpListId($request->getWhiteIpListId())
                    ->setAdminCodeId($request->getAdminCodeId())
            );
        } catch (Exception $e) {
            /**  */
        }
    }

    public static function checkingQuantityInputs($ip, TimestampTZ $time, $count = null)
    {

        return
            (integer)self::dao()->getCountByIpAndTime($ip, $time) >= $count;

    }
}

?>