<?php

/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2016-01-09 09:22:15                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/
class VkRequest extends AutoVkRequest implements Prototyped
{
	const
		VK_SERVICE_URL = 'https://api.vk.com/method/',
		VERSION = '5.42';

	private $response;

	/**
	 * @return ProtoVkRequest
	 **/
	public static function proto()
	{
		return Singleton::getInstance('ProtoVkRequest');
	}

	/**
	 * @param $attachments
	 * @return $this
	 */
	public function setAttachments($attachments)
	{
		$this->attachments[] = $attachments;

		return $this;
	}


	public function execute($method = 'wall', ... $args)
	{
		switch ($method) {
			case 'wall': {
				if ($this->getImgUrl()) {
					$result = $this->saveWallPhoto(
						$this->uploadImage(
							$this->getWallUploadServer()
						)
					);
					$this->attachments[] = $result->response[0]->id;
				}

				$result = $this->wallPost();

				$this->response = (new VkResponse)->setMethod($method)->setPostId($result->response->post_id);

				break;
			}
			case 'groups.get' : {
				$result = $this->sendRequest($method, [
					'user_id' => $args[0],
					'extended' => $args[1],
					'filter' => $args[2]
				]);

				return $result;
				break;
			}
		}

		return $this->response;
	}

	public function getWallUploadServer()
	{

		$e = ServiceExceptionEnum::noGroup();

		if (is_null($this->getGroupId()))
			throw new ServiceException($e->getErrorMsg(), $e->getErrorCode());

		$result = $this->sendRequest(
			'photos.getWallUploadServer',
			[
				'group_id' => $this->getGroupId(),
				'version' => self::VERSION
			]
		);


		if (property_exists($result, 'error'))
			throw new ServiceException($result->error->error_msg, $result->error->error_code);

		return $result->response->upload_url;
	}

	public function uploadImage($url)
	{
		$info = getimagesize($this->getImgUrl());

		$mime = MimeType::getByMimeType($info['mime']);

		$e = ServiceExceptionEnum::noSupportMime();

		switch ($mime->getExtension()) {
			case 'jpeg' || 'jpg':
				$extension = 'jpg';
				break;
			case 'png':
				$extension = 'png';
				break;
			default:
				throw new ServiceException($e->getErrorMsg(), $e->getErrorCode());
		}

		$tmpFileName = TimestampTZ::makeNow()->toString() . '.' . $extension;

		\Helpers\Uploader\TmpStore::create()->uploadFile(
			$platformFile = PlatformFile::create()
				->setFile($this->getImgUrl())
				->setMimeType($info['mime'])
				->setFileNameAndPath('social/' . $tmpFileName)
		);


		$file = \Helpers\Uploader\TmpStore::create()->getPath() . $platformFile->getFileNameAndPath();
		$finfo = finfo_open(FILEINFO_MIME_TYPE);
		$mime = finfo_file($finfo, $file);

		$curlFile = (function_exists('curl_file_create') ?
			curl_file_create($file, $mime, $tmpFileName) :
			'@' . realpath($file)
		);

		$curl = curl_init();
		curl_setopt_array($curl, array(
			CURLOPT_RETURNTRANSFER => true,
			CURLOPT_URL => $url,
			CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data'),
			CURLOPT_SSL_VERIFYHOST => false,
			CURLOPT_SSL_VERIFYPEER => false,
			CURLOPT_POST => true,
			CURLOPT_POSTFIELDS => array(
				'photo' => $curlFile,
			),
			CURLOPT_POST => false
		));

		$result = curl_exec($curl);

		curl_close($curl);

		$response = json_decode($result);

		$e = ServiceExceptionEnum::noSaveFile();

		if (empty(json_decode($response->photo, true)))
			throw new ServiceException($e->getErrorMsg(), $e->getErrorCode());

		return $response;
	}

	/**
	 * @param StdClass $response
	 * @return bool|mixed
	 * @throws ServiceException
	 */
	public function saveWallPhoto(StdClass $response)
	{
		$e = ServiceExceptionEnum::noSavedWallFile();

		$result = $this->sendRequest(
			'photos.saveWallPhoto',
			[
				'group_id' => $this->getGroupId(),
				'server' => $response->server,
				'hash' => $response->hash,
				'photo' => $response->photo
			]
		);
		if (property_exists($result, 'error'))
			throw new ServiceException($result->error->error_msg, $result->error->error_code);

		return $result;
	}

	/**
	 * @param bool $theGroup
	 * @return bool|mixed
	 * @throws ServiceException
	 */
	public function wallPost($theGroup = true)
	{
		$request = [];
		$str = '';
		$inc = 0;

		if ($theGroup)
			$request['owner_id'] = '-' . $this->getGroupId();

		if ($this->isFromGroup())
			$request['from_group'] = 1;

		foreach ($this->getAttachments() as $attach) {
			if ($inc != 0)
				$str .= ',';
			$str .= $attach;
			++$inc;
		}

		$request['attachment'] = $str;

		$request['version'] = self::VERSION;


		if (is_null($this->getMessage())) {
			$e = ServiceExceptionEnum::noWallMessages();
			throw new ServiceException($e->getErrorMsg(), $e->getErrorCode());
		}

		$result = $this->sendRequest(
			'wall.post', $request
		);

		if (property_exists($result, 'error'))
			throw new ServiceException($result->error->error_msg, $result->error->error_code);

		return $result;

	}

	/**
	 * @param $method
	 * @param $params
	 * @return bool|mixed
	 * @throws WrongArgumentException
	 */
	private function sendRequest($method, $params)
	{
		$request = "";

		if ($params && is_array($params)) {
			foreach ($params as $key => $param) {
				$request .= ($request == "" ? "" : "&") . $key . "=" . $param;
			}
		}

		$url = (new GenericUri())
			->parse(
				self::VK_SERVICE_URL .
				$method . "?" . ($request ? $request . "&" : "") .
				"access_token=" . $this->getAccessToken(),
				true
			)
			->normalize()
			->toString();

		$curl = curl_init();


		curl_setopt_array($curl,
			[
				CURLOPT_URL => $url,
				CURLOPT_RETURNTRANSFER => true,
				CURLOPT_SSL_VERIFYHOST => false,
				CURLOPT_SSL_VERIFYPEER => false
			]
		);

		$response = curl_exec($curl);

		curl_close($curl);

		if ($response) {
			return json_decode($response);
		}

		return false;
	}
}

?>